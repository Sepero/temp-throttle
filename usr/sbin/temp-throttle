#!/usr/bin/env bash

# Usage: temp-throttle max_temp
# USE CELSIUS TEMPERATURES.
# version 2.40


# exit on subcommand error, including pipes or when using undeclared variable
set -o errexit
set -o pipefail
set -o nounset

cat << EOF
Author: Sepero 2016 (sepero 111 @ gmx . com)
URL: http://github.com/Sepero/temp-throttle/

EOF

# Additional Links
# http://seperohacker.blogspot.com/2012/10/linux-keep-your-cpu-cool-with-frequency.html

# License: GNU GPL 2.0

# set -x

# Generic function for printing an error and exiting.
err_exit () {
	echo ""
	echo -e "Error: $@" 1>&2
	exit 128
}

### START Get configuration arguments.

# Function for parsing the configuration file.
simple_parse () {
	CONFIG="$(cat $CONFIG_FILE   |
		sed 's/[#;].*$//'        |  # Strip comments.
		sed 's/\s+$//'           |  # Trim trailing whitespace.
		sed 's/\s*=\s*/=/')"  # Remove whitespace around "="

	# Get value for MAX_TEMP.
	MAX_TEMP="$(echo "$CONFIG" | sed -n 's/^max_temp=//ip')"
	LOW_TEMP="$(echo "$CONFIG" | sed -n 's/^low_temp=//ip')"
}

# Function for validating temperature argument.
# Usage: check_temperature "$TEMP" <Temperatue name for use in message>
check_temperature() {
	[[ "$1" =~ ^-?[0-9]+$ ]] ||
		err_exit "$2 temperature '$1' is not an integer"
}

# Initialize configuration variables.
MAX_TEMP=""
LOW_TEMP=""
LOG_FILE=""
CONFIG_FILE="/etc/temp-throttle.conf"

# Read configuration file if it exists.
[ -f "$CONFIG_FILE" ] && simple_parse

# Get command line arguments.
print_usage() {
	echo "Usage: $0 [ -d low_temp ] [ -u ] max_temp" >&2
}
while getopts "l:t:f:u:d:" OPT; do
	case "$OPT" in
		l) LOG_FILE="$OPTARG"
			;;
		u) MAX_TEMP="$OPTARG"
			;;
		d) LOW_TEMP="$OPTARG"
			;;
		*) err_exit "Unkown parameter $OPT"
			;;
	esac
done
shift $((OPTIND-1)); # discard flags processed by getopts

[ $# -gt 0 ] && MAX_TEMP="$1"

# Verify max temperature. It must be set and must be an integer.
[ "$MAX_TEMP" != "" ] || { print_usage; err_exit "Maximum desired temperature was not specified"; }
check_temperature "$MAX_TEMP" "Maximum"
echo "Maximum temperature set to: ${MAX_TEMP}C"

# Verify low temperature. If set, it must be an integer, else provide default.
# The frequency will increase when low temperature is reached.
[ "$LOW_TEMP" != "" ] || LOW_TEMP=$((MAX_TEMP - 5))
check_temperature "$LOW_TEMP" "Low"
echo "Low temperature set to: ${LOW_TEMP}C"

[ $LOW_TEMP -lt $MAX_TEMP ] || err_exit "Low temperature must be below max temperature."


### END Get configuration arguments.


### START Initialize Global variables.

CORES=$(nproc) # Get number of CPU cores.
echo -e "Number of CPU cores detected: $CORES\n"
CORES=$((CORES - 1)) # Subtract 1 from $CORES for easier counting later.

# Temperatures internally are calculated to the thousandth.
MAX_TEMP=${MAX_TEMP}000
LOW_TEMP=${LOW_TEMP}000

FREQ_FILE="/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies"
FREQ_MIN="/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq"
FREQ_MAX="/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq"

# Store available cpu frequencies in a space separated string FREQ_LIST.
if [ -f $FREQ_FILE ]; then
	# If $FREQ_FILE exists, get frequencies from it.
	FREQ_LIST=$(cat $FREQ_FILE | xargs -n1 | sort -urn) || err_exit "Could not read available cpu frequencies from file $FREQ_FILE"
elif [ -f $FREQ_MIN -a -f $FREQ_MAX ]; then
	# Else if $FREQ_MIN and $FREQ_MAX exist, generate a list of frequencies between them.
	FREQ_LIST=$(seq $(cat $FREQ_MAX) -100000 $(cat $FREQ_MIN)) || err_exit "Could not compute available cpu frequencies"
else
	err_exit "Could not determine available cpu frequencies"
fi

FREQ_LIST_LEN=$(echo $FREQ_LIST | wc -w)

# CURRENT_FREQ will keep the index of the currently used frequency in FREQ_LIST.
CURRENT_FREQ=2

# This is a list of possible locations to read the current system temperature.
# We use the first file found.
TEMPERATURE_FILES="
/sys/class/thermal/thermal_zone0/temp
/sys/class/thermal/thermal_zone1/temp
/sys/class/thermal/thermal_zone2/temp
/sys/class/hwmon/hwmon0/temp1_input
/sys/class/hwmon/hwmon1/temp1_input
/sys/class/hwmon/hwmon2/temp1_input
/sys/class/hwmon/hwmon0/device/temp1_input
/sys/class/hwmon/hwmon1/device/temp1_input
/sys/class/hwmon/hwmon2/device/temp1_input
/sys/class/hwmon/hwmon0/temp0
/sys/class/hwmon/hwmon0/temp1
/sys/class/hwmon/hwmon0/temp2
null
"

# Store the first temperature location that exists in the variable TEMP_FILE.
# The location stored in $TEMP_FILE will be used for temperature readings.
for file in $TEMPERATURE_FILES; do
	TEMP_FILE=$file
	[ -f $TEMP_FILE ] && break
done

[ $TEMP_FILE == "null" ] && err_exit "The location for temperature reading was not found.\nPlease reference bug #7: https://github.com/Sepero/temp-throttle/issues/7"


### END Initialize Global variables.


### START define script functions.

# Set the maximum frequency for all cpu cores.
set_freq () {
	# From the string FREQ_LIST, we choose the item at index CURRENT_FREQ.
	FREQ_TO_SET=$(echo $FREQ_LIST | cut -d " " -f $CURRENT_FREQ)
	echo $FREQ_TO_SET
	for i in $(seq 0 $CORES); do
		# Try to set core frequency by writing to /sys/devices.
		{ echo $FREQ_TO_SET 2> /dev/null > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq; } ||
		# Else, try to set core frequency using command cpufreq-set.
		{ cpufreq-set -c $i --max $FREQ_TO_SET > /dev/null; } ||
		# Else, return error message.
		{ err_exit "Failed to set frequency CPU core$i. Run script as Root user. Some systems may require to install the package cpufrequtils."; }
	done
}

# Will reduce the frequency of cpus if possible.
throttle () {
	if [ $CURRENT_FREQ -lt $FREQ_LIST_LEN ]; then
		CURRENT_FREQ=$((CURRENT_FREQ + 1))
		echo -n "throttle "
		set_freq $CURRENT_FREQ
	fi
}

# Will increase the frequency of cpus if possible.
unthrottle () {
	if [ $CURRENT_FREQ -ne 1 ]; then
		CURRENT_FREQ=$((CURRENT_FREQ - 1))
		echo -n "unthrottle "
		set_freq $CURRENT_FREQ
	fi
}

# Get the system temperature.
get_temp () {
	TEMP=$(cat $TEMP_FILE)
}

# Try to return everything to normal before exiting.
exit_function () {
	exit
}

### END define script functions.

trap exit_function EXIT SIGINT SIGTERM

echo "Initialize to max CPU frequency"
unthrottle


# Main loop
while true; do
	get_temp # Gets the current temperature and set it to the variable TEMP.
	if   [ $TEMP -gt $MAX_TEMP ]; then # Throttle if too hot.
		throttle
	elif [ $TEMP -le $LOW_TEMP ]; then # Unthrottle if cool.
		unthrottle
	fi
	sleep 3 # The amount of time between checking temperatures.
done

# vim:set sw=8 ts=8 sts=8 noet:
