#!/usr/bin/env bash

# Usage: temp-throttle [config_file]
# version 3.00

INFO="Author: Sepero 2012- (sepero 111 @ gmx . com)
URL: http://github.com/Sepero/temp-throttle/

"
echo "$INFO"

# Additional Links
# http://seperohacker.blogspot.com/2012/10/linux-keep-your-cpu-cool-with-frequency.html

# License: GNU GPL 2.0
#set -x

# Try to return frequency to max before exiting.
norm_exit () {
	for((i=0; i < 50; i++)); do
		[[ CURRENT_FREQ -eq 1 ]] && break
		unthrottle 2> /dev/null
	done
	exit
}
trap norm_exit EXIT SIGINT SIGTERM

# Generic  function for printing an error and exiting.
err_exit () {
	echo ""
	echo -e "Error: $@" 1>&2
	exit 128
}

### START Get Configuration Arguments.

LOG_FILE="/var/log/temp-throttle.log"
CONFIG_FILE="/etc/temp-throttle.conf"

# One Optional Arguement = alternate config file location.
[[ -n "$1" ]] && CONFIG_FILE="$1"
[[ -e "$CONFIG_FILE" ]] || err_exit "Config file \"$CONFIG_FILE\" does not exist."

# Parse the configuration file. Strip comments. Trim whitespace. Remove whitespace around "="
CONFIG="$(cat $CONFIG_FILE   |
	sed 's/[#;].*$//'        |
	tr -d '[:blank:]')"      || \
err_exit "Reading configuration file: $CONFIG_FILE"

LOG_FILE="$(echo "$CONFIG" | sed -n 's/LOG_FILE=//ip')"
MAX_TEMP="$(echo "$CONFIG" | sed -n 's/MAX_TEMP=//ip')"
CONFIG_TEMPERATURE_FILE="$(echo "$CONFIG" | sed -n '$s/TEMPERATURE_FILE=//ip')"

# Begin redirecting output to log.
[[ -n $LOG_FILE ]] && {
	echo "Further logging redirecting to logfile: $LOG_FILE"
	exec 1>> "$LOG_FILE"; exec 2>&1; echo "$INFO"; 
}

# Verify max temperature was set.
[[ -n $MAX_TEMP ]] ||
err_exit "MAX_TEMP missing from configuration file $CONFIG_FILE. Please supply the maximum desired temperature in Celsius."
echo "Maximum temperature set to: ${MAX_TEMP}C"

# Verify temperature is an integer.
[[ $MAX_TEMP =~ ^-?[0-9]+$ ]] ||
err_exit "Maximum temperature $MAX_TEMP must be an integer."

### END Get Configuration Arguments.


### START Initialize Global Variables.

# The frequency will increase when low temperature is reached.
LOW_TEMP=$((MAX_TEMP - 5))

CORES=$(nproc) # Get number of CPU cores.
echo -e "Number of CPU cores detected: $CORES\n"
CORES=$((CORES - 1)) # Subtract 1 from $CORES for easier counting later.

# Temperatures internally are calculated to the thousandth.
MAX_TEMP=${MAX_TEMP}000
LOW_TEMP=${LOW_TEMP}000

FREQ_FILE="/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies"
FREQ_MIN="/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq"
FREQ_MAX="/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq"

# Store available cpu frequencies in a space separated string FREQ_LIST.
if [[ -f $FREQ_FILE ]]; then
	# If $FREQ_FILE exists, get frequencies from it.
	FREQ_LIST="$(cat $FREQ_FILE | xargs -n1 | sort -urn)" || err_exit "Could not read available cpu frequencies from file $FREQ_FILE"
elif [[ -f $FREQ_MIN && -f $FREQ_MAX ]]; then
	# Else if $FREQ_MIN and $FREQ_MAX exist, generate a list of frequencies between them.
	FREQ_LIST=$(seq $(cat $FREQ_MAX) -100000 $(cat $FREQ_MIN)) || err_exit "Could not compute available cpu frequencies"
else
	err_exit "Could not determine available cpu frequencies"
fi

FREQ_LIST_LEN=$(echo $FREQ_LIST | wc -w)

# This is a list of possible locations to read the current system temperature.
TEMPERATURE_FILES="
/sys/class/thermal/thermal_zone0/temp
/sys/class/thermal/thermal_zone1/temp
/sys/class/thermal/thermal_zone2/temp
/sys/class/hwmon/hwmon0/temp1_input
/sys/class/hwmon/hwmon1/temp1_input
/sys/class/hwmon/hwmon2/temp1_input
/sys/class/hwmon/hwmon0/device/temp1_input
/sys/class/hwmon/hwmon1/device/temp1_input
/sys/class/hwmon/hwmon2/device/temp1_input
/sys/class/hwmon/hwmon0/temp0
/sys/class/hwmon/hwmon0/temp1
/sys/class/hwmon/hwmon0/temp2
null
"

# If temperature file from temp-throttle.conf is set, then we force using that.
[[ -n $CONFIG_TEMPERATURE_FILE ]] && TEMPERATURE_FILES="$CONFIG_TEMPERATURE_FILE"

# Verify that we have at least one existing temperature file.
for file in $TEMPERATURE_FILES; do
	TEMP_FILE=$file
	[[ -f $TEMP_FILE ]] && break
done

# If no temperature files exist, exit with error.
[[ $TEMP_FILE == "null" ]] && err_exit "A location for temperature reading was not found.\nPlease reference bug #7: https://github.com/Sepero/temp-throttle/issues/7"

### END Initialize Global Variables.


### START Define Primary Functions.

# Modify the frequency for all cpu cores.
set_freq () {
	# From the string FREQ_LIST, we choose the item at index CURRENT_FREQ.
	FREQ_TO_SET=$(echo $FREQ_LIST | cut -d " " -f $CURRENT_FREQ)
	echo $FREQ_TO_SET
	for i in $(seq 0 $CORES); do
		# Try to set core frequency by writing to /sys/devices.
		{ echo $FREQ_TO_SET 2> /dev/null > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq; } ||
		# Else, try to set core frequency using command cpufreq-set.
		{ cpufreq-set -c $i --max $FREQ_TO_SET > /dev/null; } ||
		# Else, return error message.
		{ err_exit "Failed to set frequency CPU core$i. Run script as Root user. Some systems may require installing the package cpufrequtils."; }
	done
}

# Will reduce the frequency of cpus if possible.
throttle () {
	if [[ $CURRENT_FREQ -lt $FREQ_LIST_LEN ]]; then
		CURRENT_FREQ=$((CURRENT_FREQ + 1))
		echo -n "$(date "+%Y-%m-%d %H:%M:%S")   throttle "
		set_freq $CURRENT_FREQ
	fi
}

# Will increase the frequency of cpus if possible.
unthrottle () {
	if [[ $CURRENT_FREQ -ne 1 ]]; then
		CURRENT_FREQ=$((CURRENT_FREQ - 1))
		echo -n "$(date "+%Y-%m-%d %H:%M:%S") unthrottle "
		set_freq $CURRENT_FREQ
	fi
}

# Get the temperature from all available sources, and find the highest temp.
get_temp () {
	TEMP="$(cat $TEMPERATURE_FILES 2>/dev/null | xargs -n1 | sort -g -r | head -1)"
}

### END Define Primary Functions.

# CURRENT_FREQ will keep the index of the currently used frequency in FREQ_LIST.
CURRENT_FREQ=2
echo "Initialize to max CPU frequency"
unthrottle  # Will unthrottle CURRENT_FREQ to 1. Max Frequency.

# START Main Loop.
while true; do
	get_temp # Gets the current temperature and set it to the variable TEMP.
	if   [[ $TEMP -gt $MAX_TEMP ]]; then # Throttle if too hot.
		throttle
	elif [[ $TEMP -le $LOW_TEMP ]]; then # Unthrottle if cool.
		unthrottle
	fi
	sleep 3 # The amount of time between checking temperatures.
done


# Upcoming modifications for parsing config file.

#typeset -A config # init array
#config=( # set default values in config array
#    [username]="root"
#    [password]=""
#    [hostname]="localhost"
#)
#
#while read line
#do
#    if echo $line | grep -F = &>/dev/null
#    then
#        varname=$(echo "$line" | cut -d '=' -f 1)
#        config[$varname]=$(echo "$line" | cut -d '=' -f 2-)
#    fi
#done < myscript.conf
#
#declare -A config
#while IFS=$'[ \t]*=[ \t]*' read -r name value
#do
#    echo "Read name=$name, value=$value" >&2
#    config[$name]="$value"
#done
#
#echo "${config[$name]}"

# Logging date/time https://github.com/Sepero/temp-throttle/pull/37/commits/b384606c481661d4240b6a4ff6d75d33d0d4f286
# Log Freq and Temp in Si units https://github.com/Sepero/temp-throttle/pull/37/commits/cd571ac00a3b73559f3608cdbed9d31dde9a1399
# Implement Upthrottle difference as config variable.
# Frequency step multiplier, to correct faster on systems with many steps.
