#!/usr/bin/env bash

# Usage: temp-throttle max_temp
# USE CELSIUS TEMPERATURES.
# version 2.41

cat << EOF
Author: Sepero 2016 (sepero 111 @ gmx . com)
URL: http://github.com/Sepero/temp-throttle/

EOF

# Additional Links
# http://seperohacker.blogspot.com/2012/10/linux-keep-your-cpu-cool-with-frequency.html

# License: GNU GPL 2.0

declare -r CONFIG_FILE="/etc/`basename $0`.conf"
declare -r LOCK_FILE="/var/lock/`basename $0`.lock"

[ -f "${LOCK_FILE}" ] && exit 1


# Try to return everything to normal before exiting.
exit_function () {
	rm -f "${LOCK_FILE}"
	exit $1
}

# Generic  function for printing an error and exiting.
err_exit () {
	echo ""
	echo -e "Error: ${1:-"Unknown error, aborted"}" 1>&2
	exit_function 128
}

showHelp() {
	echo "Usage: `basename $0` [<options...>] <celsius>"
	echo ""
	echo "Options:"
	echo "  -c, --check <n>   check temperature every <n> seconds"
	echo "  -h, --help        show this help"
	exit_function
}

trap exit_function EXIT SIGHUP SIGINT SIGTERM
trap err_exit ERR

touch "${LOCK_FILE}"


### START Get configuration arguments.

# Function for parsing the configuration file.
simple_parse () {
	CONFIG="$(cat $CONFIG_FILE   |
		sed 's/[#;].*$//'        |  # Strip comments.
		xargs                    |  # Trim whitespace.
		sed 's/\s*=\s*/=/')"        # Remove whitespace around "="
		
		MAX_TEMP="$(echo "$CONFIG" | sed -n '$s/MAX_TEMP=//ip')"
		TEMP_FILE="$(echo "$CONFIG" | sed -n '$s/TEMPERATURE_FILE=//ip')"
		CHECK_SECS="$(echo "$CONFIG" | sed -n 's/^CHECK_SECS=//ip')"
}

# Initialize configuration variables.
MAX_TEMP=""
TEMP_FILE=""
CHECK_SECS=3

# Read configuration file if it exists.
[ -f "$CONFIG_FILE" ] && simple_parse

# Get command line arguments
while [ "$1" != "" ]; do
	case $1 in
		-c | --check)
			shift
			CHECK_SECS="$1"
			;;
		-h | --help)
			showHelp
			;;
		*)
			[ -z "${MAX_TEMP}" ] && MAX_TEMP="$1"
			;;
	esac
	shift
done


# If max temperature wasn't found, then print a message and exit.
[ "$MAX_TEMP" != "" ] ||
err_exit "Please supply a maximum desired temperature in Celsius.\nFor example:  ${0} 60"
echo "Maximum temperature set to: ${MAX_TEMP}Â°C"

# Verify temperature is an integer.
[[ "$MAX_TEMP" =~ ^-?[0-9]+$ ]] ||
err_exit "Maximum temperature $MAX_TEMP must be an integer."

# Verify sleep seconds are an integer.
[[ "${CHECK_SECS}" =~ ^[0-9]+$ ]] ||
err_exit "Seconds between checks must be an integer."

### END Get configuration arguments.


### START Initialize Global variables.

# The frequency will increase when low temperature is reached.
LOW_TEMP=$((MAX_TEMP - 5))

CORES=$(nproc) # Get number of CPU cores.
echo -e "Number of CPU cores detected: $CORES\n"
CORES=$((CORES - 1)) # Subtract 1 from $CORES for easier counting later.

# Temperatures internally are calculated to the thousandth.
MAX_TEMP=${MAX_TEMP}000
LOW_TEMP=${LOW_TEMP}000

FREQ_FILE="/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies"
FREQ_MIN="/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq"
FREQ_MAX="/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq"

# Store available cpu frequencies in a space separated string FREQ_LIST.
if [ -f $FREQ_FILE ]; then
	# If $FREQ_FILE exists, get frequencies from it.
	FREQ_LIST=$(cat $FREQ_FILE | xargs -n1 | sort -urn) || err_exit "Could not read available cpu frequencies from file $FREQ_FILE"
elif [ -f $FREQ_MIN -a -f $FREQ_MAX ]; then
	# Else if $FREQ_MIN and $FREQ_MAX exist, generate a list of frequencies between them.
	FREQ_LIST=$(seq $(cat $FREQ_MAX) -100000 $(cat $FREQ_MIN)) || err_exit "Could not compute available cpu frequencies"
else
	err_exit "Could not determine available cpu frequencies"
fi

FREQ_LIST_LEN=$(echo $FREQ_LIST | wc -w)

# CURRENT_FREQ will keep the index of the currently used frequency in FREQ_LIST.
CURRENT_FREQ=2

# This is a list of possible locations to read the current system temperature.
# We use the first file found.

if [[ -n "${TEMP_FILE}" && ! -r "${TEMP_FILE}" ]]; then
	err_exit "Given temperature location does not exist"
elif [[ -z "${TEMP_FILE}" ]]; then
	for p in /sys/class/thermal/thermal_zone*/temp; do
		if [[ -r "$p" ]]; then
			TEMP_FILE=$p
			break
		fi
	done
	if [[ -z "${TEMP_FILE}" ]]; then
		for p in /sys/class/hwmon/hwmon*/temp*_input; do
			if [[ -r "$p" ]]; then
				TEMP_FILE=$p
				break
			fi
		done
	fi
	if [[ -z "${TEMP_FILE}" ]]; then
		for p in /sys/class/hwmon/hwmon*/device/temp*_input; do
			if [[ -r "$p" ]]; then
				TEMP_FILE=$p
				break
			fi
		done
	fi
	if [[ -z "${TEMP_FILE}" ]]; then
		err_exit "The location for temperature reading was not found.\nPlease reference bug #7: https://github.com/Sepero/temp-throttle/issues/7"
	fi
fi


### END Initialize Global variables.


### START define script functions.

# Set the maximum frequency for all cpu cores.
set_freq () {
	# From the string FREQ_LIST, we choose the item at index CURRENT_FREQ.
	FREQ_TO_SET=$(echo $FREQ_LIST | cut -d " " -f $CURRENT_FREQ)
	echo $FREQ_TO_SET
	for i in $(seq 0 $CORES); do
		# Try to set core frequency by writing to /sys/devices.
		{ echo $FREQ_TO_SET 2> /dev/null > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq; } ||
		# Else, try to set core frequency using command cpufreq-set.
		{ cpufreq-set -c $i --max $FREQ_TO_SET > /dev/null; } ||
		# Else, return error message.
		{ err_exit "Failed to set frequency CPU core$i. Run script as Root user. Some systems may require to install the package cpufrequtils."; }
	done
}

# Will reduce the frequency of cpus if possible.
throttle () {
	if [ $CURRENT_FREQ -lt $FREQ_LIST_LEN ]; then
		CURRENT_FREQ=$((CURRENT_FREQ + 1))
		echo -n "throttle "
		set_freq $CURRENT_FREQ
	fi
}

# Will increase the frequency of cpus if possible.
unthrottle () {
	if [ $CURRENT_FREQ -ne 1 ]; then
		CURRENT_FREQ=$((CURRENT_FREQ - 1))
		echo -n "unthrottle "
		set_freq $CURRENT_FREQ
	fi
}

# Get the system temperature.
get_temp () {
	TEMP=$(cat $TEMP_FILE)
}


### END define script functions.

echo "Initialize to max CPU frequency"
unthrottle


# Main loop
while true; do
	get_temp # Gets the current temperature and set it to the variable TEMP.
	if   [ $TEMP -gt $MAX_TEMP ]; then # Throttle if too hot.
		throttle
	elif [ $TEMP -le $LOW_TEMP ]; then # Unthrottle if cool.
		unthrottle
	fi
	sleep ${CHECK_SECS} # The amount of time between checking temperatures.
done
